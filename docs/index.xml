<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on suzuki8</title>
    <link>https://eightsuzuki.github.io/</link>
    <description>Recent content in Home on suzuki8</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2020, EightSuzuki.</copyright>
    <lastBuildDate>Fri, 03 Jan 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://eightsuzuki.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://eightsuzuki.github.io/blog/markdown-syntax/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://eightsuzuki.github.io/blog/markdown-syntax/</guid>
      <description>&lt;p&gt;For a quick cheatsheet, check out &lt;a href=&#34;https://simplemde.com/markdown-guide&#34;&gt;https://simplemde.com/markdown-guide&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About me</title>
      <link>https://eightsuzuki.github.io/aboutme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://eightsuzuki.github.io/aboutme/</guid>
      <description>About me 2000年7月に生まれ、筑波大学附属小中高学校を卒業し、早稲田大学電気情報生命工学科に進学しました。機械学習の研究室に配属し、同じ研究室で大学院に進学します。卒業予定は、2026年3月です。&#xA;2022年末から、当研究室の卒業生のGoogleのフロントエンジニアが主催するゼミで本格的にフロントエンドの勉強を始めました。&#xA;Hobbies, etc. XEBECというバリ取りシェア世界一の会社でウェブデザインを含むデザインの仕事に従事しています。&#xA;大学では、サークル活動として文化祭運営委員のデザインチーフとして参加し、文化祭全体のデザインを指揮しました。この活動において、約30名のメンバーを統率し、コロナ禍以前の活気以上の実現をすることができました。&#xA;趣味はお絵描きで、SFが好きです。特に「新世界より」と「haramony」がお気に入りです。</description>
    </item>
    <item>
      <title>Projects</title>
      <link>https://eightsuzuki.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://eightsuzuki.github.io/projects/</guid>
      <description>Projects マイクロサービスを採用したブログ Webアプリ レポジトリー: Blog-using-Microservices-with-Node-JS-and-React 目的: 大規模サービスを安定して提供する上で欠かせないマイクロサービスの概念を学び、非同期通信やサービスのカプセル化を体験することが目的。 課題: マイクロサービスに特有の課題である、サービスの分割方法やサービス間の通信手法などに取り組んでいます。 解決策とプロセス: AWS や GCP などの公式ドキュメントを参考にし、マイクロサービスの概念や設計方法を学習しました。これらのサービスで実際に使用されているサービス間通信の手法も参考にしました。 結果: マイクロサービスを実際に構築し、故意に一部のサービスを停止させても他のサービスが正常に動作することを確認。データの整合性を確保しつつ、サービス間で通信するための基本的な手法や考え方を習得しました。 Reactを使用したGraphQLのアプリ レポジトリー:GraphQL-with-React 目的: GraphQLというクエリ言語およびAPIのためのランタイム環境について学ぶ。RESTとの違いを理解し、柔軟で効率的なクエリ言語の利用を目指す。 課題: RESTful APIはエンドポイントごとにデータを提供するため、使用しない過剰なデータも取得することで過剰な通信が発生。GraphQLを使用するのが初めてであった。 解決策とプロセス: GraphQLの基本的な使用方法を学ぶため、最初にGraphiQLで実際にjson-serverでqueryとmutationを実行しながら、データがやり取りされる仕組みを確認。 結果: GraphQLを実際に使用し、スキーマが中心的な役割を果たし、データの型や関連性を適切に設計。余分なデータの取得を避け、リソースの無駄をなくすことができることを確認。 Reactの構築 レポジトリー: mini-react 目的: Reactがどのように動いているか理解し、実際にReactを構築して動作するかを確認。Jestを使用したテストの方法も学習。 課題: Jestを使用したテストが不慣れであり、JavaScriptの知識不足があった。 解決策とプロセス: JSの専門書「You Don&amp;rsquo;t Know JS」を読み知識不足を解消。Jestは公式サイトのチュートリアルを読みながら学習。 結果: useStateやレンダリングの仕組みについて理解し、実際に実装。Jestを使用したテストの書き方についても学習。 Webサーバーフレームワークの構築 レポジトリー: GCDWebServer-Swift 目的: Webサーバーが実際にどのように動いているか理解し、軽量なGCDWebServerを構築して動作するかを確認。 課題: 実際に実装していく上でSwiftを使用することが初めてであった。 解決策とプロセス: Swiftの公式サイトのチュートリアルを読みながら学習。 結果: GCDWebServerが正常に起動し、指定したポートでリクエストを待機していることを確認。ルーティングの動作と応答の確認。 </description>
    </item>
    <item>
      <title>Skills</title>
      <link>https://eightsuzuki.github.io/skills/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://eightsuzuki.github.io/skills/</guid>
      <description>Skills Programming Languages Proficient in: JavaScript / TypeScript / Python&#xA;Familiar with: C / PHP / Go / Swift / Java&#xA;Experience with: TypeScript / Objective-C / R&#xA;Tech Framework: Vue.js / React / Next.js / Express&#xA;Architecture: Microservices&#xA;Database: MySQL / PostgresQL / MongoDB&#xA;Containerization &amp;amp; Orchestration: Docker / Docker Compose / Kubernetes&#xA;Version Control: Git / GitHub / GitLab&#xA;Operating System: Linux&#xA;Query Language: GraphQL&#xA;Testing Framework: Jest</description>
    </item>
  </channel>
</rss>
